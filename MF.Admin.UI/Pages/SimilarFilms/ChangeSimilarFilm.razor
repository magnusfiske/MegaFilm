@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page -> @Film.Title</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.AddFilm))
            {
                <InputSelect @bind-Value="Model.SimilarFilmId" class="form-control mb-3">
                    <option value=0>Film...</option>
                    @foreach (var film in Films)
                    {
                        <option value="@film.Id">@film.Title</option>
                    }
                </InputSelect>
            }
            else
            {
                <InputSelect @bind-Value="Model.SimilarFilmId" class="form-control mb-3">
                    <option value=0>Film...</option>
                    @foreach (var film in FilmsInSimilar)
                    {
                        <option value="@film.Id">@film.Title</option>
                    }
                </InputSelect>
            }

        </div>
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary")">@Page</button>
    </EditForm>
</div>


@code {
    [Parameter] public SimilarFilmDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    [Parameter] public List<FilmGenreDTO> FilmGenres { get; set; } = new();
    [Parameter] public FilmSimilarDTO Film { get; set; } = new();
    [Parameter] public int ParentFilmId { get; set; } = 0;
    List<FilmEditDTO> FilmsInSimilar { get; set; } = new();
    List<FilmDTO> Films { get; set; } = new();
    List<SimilarFilmDTO> Similars { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Model.ParentFilmId = ParentFilmId;
        Films = await AdminService.GetAsync<FilmDTO>("films");

        AddSimilars();

        RemoveDuplicates();
    }

    async Task OnFormSubmit()
    {
        try
        {
            if (Page.Equals(PageType.AddFilm))
            {
                await AdminService.CreateAsync<SimilarFilmDTO>("SimilarFilms", Model);
            }
            if (Page.Equals(PageType.RemoveFilm))
                await AdminService.DeleteAsync<SimilarFilmDTO>($"SimilarFilms?id={Model.ParentFilmId}&id={Model.SimilarFilmId}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the FilmGenre");
        }

    }

    void AddSimilars()
    {
        foreach (var fs in Film.SimilarFilms)
        {
            Similars.Add(fs);
        }

        foreach (var f in Similars)
        {
            FilmsInSimilar.Add(f.Similar);
        }
    }

    void RemoveDuplicates()
    {
        var filmsToRemove = from fs in FilmsInSimilar
                            join f in Films
                            on fs.Id equals f.Id
                            into sg
                            from fi in sg
                            select fi;

        foreach (var film in filmsToRemove)
        {
            Films.Remove(film);
        }
    }
}
