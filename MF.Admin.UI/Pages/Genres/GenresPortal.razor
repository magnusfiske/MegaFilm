@inject IAdminService AdminService



@if (!string.IsNullOrEmpty(Alert))
{
    <div class="d-flex">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>@Alert</strong>
            <button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (Navigation == PageType.Create)
{
    <ChangeGenre Page="@Navigation" OnChange="OnChange"></ChangeGenre>
}
@if (Navigation == PageType.Edit || Navigation == PageType.Delete)
{
    <ChangeGenre Page="@Navigation" OnChange="OnChange" Model="Genre"></ChangeGenre>
}
@if (Navigation == PageType.AddFilm || Navigation == PageType.RemoveFilm)
{
    <ChangeFilmGenre Page="@Navigation" OnChange="OnChange" Model="FilmGenre" FilmGenres="FilmGenres" Genre="@Genre.Name" GenreId="@Genre.Id"></ChangeFilmGenre>
}

<div class="d-flex">
    <a href="/" type="button" class="btn btn-outline-secondary me-1">Home</a>
    <button type="button" class="btn btn-outline-primary me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
    <button type="button" class="btn btn-outline-success me-1" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<GenresIndex OnClick="OnClick" Model="Model"></GenresIndex>

@code {
    List<GenreDTO> Model { get; set; } = new();
    string Alert { get; set; } = string.Empty;
    string Navigation { get; set; } = PageType.Index;
    public GenreDTO Genre { get; set; } = new();
    public List<FilmGenreDTO> FilmGenres { get; set; } = new();
    public FilmGenreDTO FilmGenre { get; set; } = new();

    void ChangePageType(string pageType) => Navigation = pageType;

    void CloseAlert() => Alert = string.Empty;

    async Task OnClick(ClickModel model)
    {
        if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
            Genre = await AdminService.SingleAsync<GenreDTO>($"Genres/{model.Id}") ?? new();

        if (model.PageType.Equals(PageType.AddFilm) || model.PageType.Equals(PageType.RemoveFilm))
            Genre = await AdminService.SingleAsync<GenreDTO>($"Genres/{model.Id}") ?? new();
            FilmGenres = await AdminService.GetAsync<FilmGenreDTO>($"FilmGenres/{model.Id}") ?? new();

        ChangePageType(model.PageType);
    }

    protected override async Task OnInitializedAsync()
    {
        Model = await AdminService.GetAsync<GenreDTO>($"Genres");

    }

    async Task OnChange(string alert)
    {
        try
        {
            Alert = alert;
            Model = await AdminService.GetAsync<GenreDTO>($"Genres");
            ChangePageType(PageType.Index);
        }
        catch
        {
            Alert = "Couldn't create/edit/delete the Genre";
        }
    }
}
